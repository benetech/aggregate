/*
 * Copyright (C) 2012-2013 University of Washington
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */

package org.opendatakit.aggregate.server;

import com.google.gwt.user.server.rpc.RemoteServiceServlet;
import org.opendatakit.aggregate.ContextFactory;
import org.opendatakit.aggregate.client.RegionalOffice;
import org.opendatakit.aggregate.client.exception.RequestFailureException;
import org.opendatakit.aggregate.client.preferences.OdkTablesAdmin;
import org.opendatakit.aggregate.client.preferences.OdkTablesAdminService;
import org.opendatakit.aggregate.client.table.OdkRegionalOfficeTable;
import org.opendatakit.aggregate.odktables.exception.PermissionDeniedException;
import org.opendatakit.aggregate.odktables.security.OdkTablesUserInfoTable;
import org.opendatakit.aggregate.odktables.security.TablesUserPermissions;
import org.opendatakit.aggregate.odktables.security.TablesUserPermissionsImpl;
import org.opendatakit.common.persistence.CommonFieldsBase;
import org.opendatakit.common.persistence.Datastore;
import org.opendatakit.common.persistence.Query;
import org.opendatakit.common.persistence.client.exception.DatastoreFailureException;
import org.opendatakit.common.persistence.exception.ODKDatastoreException;
import org.opendatakit.common.persistence.exception.ODKEntityNotFoundException;
import org.opendatakit.common.persistence.exception.ODKTaskLockException;
import org.opendatakit.common.security.User;
import org.opendatakit.common.security.client.UserSecurityInfo;
import org.opendatakit.common.security.client.exception.AccessDeniedException;
import org.opendatakit.common.security.common.EmailParser;
import org.opendatakit.common.security.spring.RegisteredUsersTable;
import org.opendatakit.common.security.spring.UserGrantedAuthority;
import org.opendatakit.common.web.CallingContext;
import org.springframework.security.core.GrantedAuthority;

import javax.servlet.http.HttpServletRequest;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class OdkTablesAdminServiceImpl extends RemoteServiceServlet implements
    OdkTablesAdminService {

  /**
   * Serialization Identifier
   */
  private static final long serialVersionUID = -2602832816355702415L;

  /**
   * This method should return the list of all the admins/users in the
   * datastore. Currently from the table generated by DataStoreUserData. NB:
   * Does not use the simple datastore interaction--might need to be careful if
   * that is what the other OdkTables things use.
   * @throws ODKTaskLockException
   */
  @Override
  public OdkTablesAdmin[] listAdmin() throws AccessDeniedException, DatastoreFailureException, RequestFailureException {
    try {
      CallingContext cc = this.getCC();
      User user = cc.getCurrentUser();
      if ( user.isAnonymous() ) {
        throw new AccessDeniedException("Anonymous users cannot access ODK Tables administration settings");
      }
      ArrayList<OdkTablesAdmin> results = new ArrayList<OdkTablesAdmin>();

      Query q = RegisteredUsersTable.createQuery(cc.getDatastore(), "SecurityServiceUtil.getAllUsers", cc.getCurrentUser());
      RegisteredUsersTable.applyNaturalOrdering(q, cc);

      List<? extends CommonFieldsBase> l = q.executeQuery();

      for ( CommonFieldsBase cb : l ) {
         RegisteredUsersTable t = (RegisteredUsersTable) cb;

         String uriUser = t.getUri();
         if ( uriUser.equals(User.ANONYMOUS_USER) || uriUser.equals(User.DAEMON_USER) ) {
           // don't care about these...
           continue;
         }
         Set<GrantedAuthority> grants = UserGrantedAuthority.getGrantedAuthorities(uriUser, cc.getDatastore(), cc.getCurrentUser());

         TablesUserPermissions tablesUser = new TablesUserPermissionsImpl(cc, uriUser, grants);

         String canonicalName = t.getUsername();
         if ( canonicalName == null ) {
           canonicalName = t.getEmail().substring(EmailParser.K_MAILTO.length());
         }

        OdkTablesAdmin holder = new OdkTablesAdmin();

        holder.setUriUser(uriUser);
        holder.setOdkTablesUserId(tablesUser.getOdkTablesUserId());
        holder.setPhoneNumber(tablesUser.getPhoneNumber());
        holder.setXBearerCode(tablesUser.getXBearerCode());
        holder.setName(canonicalName);

        results.add(holder);
      }
      return results.toArray(new OdkTablesAdmin[results.size()]);

    } catch (ODKDatastoreException e) {
      e.printStackTrace();
      throw new DatastoreFailureException(e);
    } catch (ODKTaskLockException e) {
      e.printStackTrace();
      throw new RequestFailureException(e);
    } catch (PermissionDeniedException e) {
      e.printStackTrace();
      throw new AccessDeniedException(e);
    }
  }

    /**
     * Insert regional offices to database.
     *
     * @throws DatastoreFailureException
     */
    @Override
  public void setOffice(ArrayList<RegionalOffice> regionalOffices) throws AccessDeniedException, DatastoreFailureException, RequestFailureException
  {
    try {
        CallingContext cc = this.getCC();
        Datastore ds = cc.getDatastore();
        User user = cc.getCurrentUser();
        ArrayList<RegionalOffice> offices = new ArrayList<RegionalOffice>();
        offices.addAll(regionalOffices);

        OdkRegionalOfficeTable prototype = OdkRegionalOfficeTable.assertRelation(cc);
        OdkRegionalOfficeTable record = null;

        //insert offices into database
        for(RegionalOffice office : offices) {
            if(office.isRemoved())
            {
                OdkRegionalOfficeTable recordToDelete = OdkRegionalOfficeTable.getRecordFromDatabase(office.getOfficeID(),cc);
                if(recordToDelete != null)
                    ds.deleteEntity(recordToDelete.getEntityKey(),user);
            }
            else {
                try {
                    //when office is already exists in database it is just edited
                    record = ds.getEntity(prototype, office.getURI(), user);
                    record.setRegionalOfficeId(office.getOfficeID());
                    record.setRegionalOfficeName(office.getName());
                } catch (ODKEntityNotFoundException e) {
                    //when office is not exists we create a new record in database
                    record = ds.createEntityUsingRelation(prototype, user);
                    record.setRegionalOfficeId(office.getOfficeID());
                    record.setRegionalOfficeName(office.getName());
                }
                record.persist(cc);
            }
        }
    } catch (ODKDatastoreException e) {
         e.printStackTrace();
        throw new DatastoreFailureException(e);
    }
  }

    /**
     * Gets regional offices from database.
     *
     * @throws DatastoreFailureException
     */
    @Override
  public ArrayList<RegionalOffice> getAllOffices() throws AccessDeniedException, DatastoreFailureException, RequestFailureException
  {
      CallingContext cc = this.getCC();
      Datastore ds = cc.getDatastore();
      ArrayList<RegionalOffice> regionalOffices = new ArrayList<RegionalOffice>();
      try {
          OdkRegionalOfficeTable regionalOfficeTable = OdkRegionalOfficeTable.assertRelation(cc);
          Query q = ds.createQuery(regionalOfficeTable,
                  "OdkRegionalOfficeTable.getAllOffices", cc.getCurrentUser());

          List<? extends CommonFieldsBase> l = q.executeQuery();
          
          for (CommonFieldsBase cb : l) {
              OdkRegionalOfficeTable t = (OdkRegionalOfficeTable) cb;
              RegionalOffice i = new RegionalOffice(t.getUri(), t.getRegionalOfficeName(),t.getRegionalOfficeId());
              regionalOffices.add(i);
          }
      } catch (ODKDatastoreException e) {
          e.printStackTrace();
          throw new DatastoreFailureException(e);
      }

      return regionalOffices;
  }

  /**
   * Deletes an ODK Tables admin from the datastore.
   *
   * @throws DatastoreFailureException
   */
  @Override
  public Boolean deleteAdmin(String uriUser) throws AccessDeniedException,
      DatastoreFailureException {
    CallingContext cc = this.getCC();
    try {
      User user = cc.getCurrentUser();
      if ( user.isAnonymous() ) {
        throw new AccessDeniedException("Anonymous users cannot alter ODK Tables administration settings");
      }
      // First turn the string ID into an EntityKey so it can be deleted
      OdkTablesUserInfoTable.deleteOdkTablesUser(uriUser, cc);
    } catch (ODKDatastoreException e) {
      // If you've gotten here there was a datastore problem
      e.printStackTrace();
      throw new DatastoreFailureException(e);
    }
    return true;
  }

  @Override
  public Boolean updateAdmin(OdkTablesAdmin admin) throws AccessDeniedException {
    CallingContext cc = this.getCC();
    User user = cc.getCurrentUser();
    if ( user.isAnonymous() ) {
      throw new AccessDeniedException("Anonymous users cannot alter ODK Tables administration settings");
    }
    return true;
  }

  private CallingContext getCC() {
    // should this not be this? should it really be super?
    HttpServletRequest req = super.getThreadLocalRequest();
    return ContextFactory.getCallingContext(this, req);
  }

  @Override
  public Boolean setAdmins(ArrayList<UserSecurityInfo> admins) throws AccessDeniedException,
      RequestFailureException, DatastoreFailureException {
    CallingContext cc = this.getCC();
    User user = cc.getCurrentUser();
    if ( user.isAnonymous() ) {
      throw new AccessDeniedException("Anonymous users cannot alter ODK Tables administration settings");
    }
    boolean failure = false;
    for (UserSecurityInfo info : admins) {
      try {
        RegisteredUsersTable theUser = null;
        if (info.getEmail() != null) {
          theUser = RegisteredUsersTable.getUserByEmail(info.getEmail(), cc.getUserService(),
              cc.getDatastore());
        } else if (info.getUsername() != null) {
          theUser = RegisteredUsersTable.getUserByUsername(info.getUsername(), cc.getUserService(),
              cc.getDatastore());
        }
        if (theUser == null) {
          failure = true;
          continue;
        }
        Set<GrantedAuthority> grants =
            UserGrantedAuthority.getGrantedAuthorities(theUser.getUri(), cc.getDatastore(), cc.getCurrentUser());

        @SuppressWarnings("unused")
        TablesUserPermissionsImpl usePermissions = new TablesUserPermissionsImpl(cc, theUser.getUri(), grants);
      } catch (ODKDatastoreException e) {
        // If you've gotten here there was a datastore problem
        e.printStackTrace();
        failure = true;
      } catch (ODKTaskLockException e) {
        e.printStackTrace();
        failure = true;
      } catch (PermissionDeniedException e) {
        e.printStackTrace();
        failure = true;
      }
    }
    return !failure;
  }

}
